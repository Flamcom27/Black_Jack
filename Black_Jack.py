# -*- coding: utf-8 -*-
"""блек джек.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V4FLhzjc7I6Uto1moNtbtrRG4RHgklMq
"""

#2 типа колод: Большая(56) и мальнькая(36 карт)
# 3 режима: Одиночный, Мультиплеер(по умолчанию 2)(* Произвольное количество игроков),**Одиночный против компьютера
# Игроки начинают с 2 случайными картами.
# Игроки могут: Брать карту; Завершать ход; Пасовать; Остановиться и обьявить свой результат; Проиграть
# Игрок побеждает если: У него на руках сумма чисел карт равна 21; Если у него сумма чисел карт больше среди всех игроков(кроме Одиночного режима).
# При взятии карты из колоды до следующей партии она пропадает.

from abc import ABC, abstractmethod

import random

class Players_n_dealer:

  @abstractmethod
  def __init__():
    """карты и средства игрока"""
    raise NotImplemented

  @abstractmethod
  def take_card():
    """берет карту"""
    raise NotImplemented

  @abstractmethod
  def win():
    """выигрывает"""
    raise NotImplemented

  @abstractmethod
  def count_score():
    """считает карты игрока"""
    raise NotImplemented

class Player(Players_n_dealer):

  def __init__(self, bankroll, name):
    self.name = name
    self.hand = {}
    self.bankroll = bankroll
    self.score_1 = 0 

  def take_card(self, deck):
    hand_card = random.choice(list(deck))
    print(hand_card)
    card_obj = deck.pop(hand_card)
    self.count_score(card_obj)
    self.hand.update({hand_card: card_obj})

  def bet(self, bank):
    player_bet = int(input('введите ставку '))
    self.bankroll -= player_bet 
    if self.bankroll < 0:
      print('недостаточно средств')
      self.bankroll += player_bet
      return bank
    else:
      bank += player_bet
      return bank

  def count_score(self, some_card):
    if some_card._value == (1, 11):
      self.score_1 += 1
      self.score_11 = self.score_1 + 10
      if self.score_11 > 21:
        del self.score_11
    else:
      self.score_1 += some_card._value
      try:
        self.score_11 += some_card._value
        if self.score_11 > 21:
          del self.score_11
      except:
        pass
    if hasattr(self, 'score_11') and self.score_11 == 21:
        self.score_1 = self.score_11
        del self.score_11
        print(f"{self.name} блекджек")
        print(f"{self.name} счет {self.score_1}")
    elif hasattr(self, 'score_11'):
      print(f"{self.name} счет {self.score_1} или {self.score_11}")
    else:
      print(f'{self.name} счет {self.score_1}')

class Dealer(Player):

  def __init__(self, name):
    self.name = name
    self.bankroll = float('inf')
    self.hand = {}
    self.score_1 = 0

  def dealer_step(self, deck):
    while self.score_1 < 16:
      self.take_card(deck)


class Card:

  def __init__(self, value, kind):
    self._nomen = value
    if value == 1:
      self._nomen = 'A'
      value = (1, 11)
    self._value = value
    self._kind = kind

def win(member, main_bank):
  print(f'выигрывает {member.name}')
  member.bankroll += main_bank * 2

def generate_deck(arg, kind):
  for i in arg:
    if type(i) == int:
      return {f'{i}_{kind}': Card(i, f"{kind}") for i in arg}
    elif type(i) == str:
      return {f'{i}_{kind}': Card(10, f"{kind}") for i in arg}

def compare_scores(dealer, player): #сравнить счет игрока и крупье  
  d_s = dealer.score_1 - 21
  p_s = player.score_1 - 21
  if d_s == p_s:
    print('ничья')
    player.bankroll += main_bank
  elif d_s > 0 and p_s > 0:
    if d_s < p_s:
      win(dealer, main_bank)
    else:
      win(player, main_bank)
  elif d_s < 0 and p_s < 0:
    if d_s < p_s:
      win(player, main_bank)
    else:
      win(dealer, main_bank)
  elif d_s < 0 and p_s > 0:
    win(dealer, main_bank)
  elif d_s > 0 and p_s < 0:
    win(player, main_bank)
  elif p_s == 0 and d_s != 0:
    win(player, main_bank)
  elif p_s != 0 and d_s == 0:
    win(dealer, main_bank)

dict_spades = generate_deck(range(1,11), kind = 'пика')
dict_spades.update(generate_deck(('J', 'Q', 'K'), kind = 'пика'))

dict_hearts = generate_deck(range(1,11), kind = 'черва')
dict_hearts.update(generate_deck(('J', 'Q', 'K'), kind = 'черва'))

dict_clubs = generate_deck(range(1,11), kind = 'крести')
dict_clubs.update(generate_deck(('J', 'Q', 'K'), kind = 'крести'))

dict_diamonds = generate_deck(range(1,11), kind = 'бубна')
dict_diamonds.update(generate_deck(('J', 'Q', 'K'), kind = 'бубна'))

deck_56 = {}
deck_56.update(dict_diamonds)
deck_56.update(dict_clubs)
deck_56.update(dict_hearts)
deck_56.update(dict_spades)

deack_56_reserved = deck_56.copy()

player_1 = Player(1000, 'игрок')
dealer = Dealer('крупье')

main_bank = 0

while True:
  
  if player_1.bankroll == 0:
    print('Спасибо за деньги! Приходите к нам еще :-D ')
    break
  print(f'ваш банкролл: {player_1.bankroll}')
  status = input('если хотите сделать ставку введите - 1, закончить игру - 2 ')
  if status == '1':
    main_bank = player_1.bet(main_bank)
    if main_bank == 0:
      continue
  elif status == '2':
    break
  else:
    print('данные введены неправильно, попробуйте снова...')
    continue
  player_1.take_card(deck_56)
  player_1.take_card(deck_56)
  while True:
    if player_1.score_1 >= 21:
      break
    player_1.hand
    print('взять еще одну карту - 1, пасс - 2')
    status = input()
    if status == '1':
      player_1.take_card(deck_56)
    elif status == '2':
      if hasattr(player_1, 'score_11'):
        player_1.score_1 = player_1.score_11
        del player_1.score_11
      break
  dealer.dealer_step(deck_56)
  compare_scores(dealer, player_1)
  player_1 = Player(player_1.bankroll, 'игрок')
  dealer = Dealer('крупье')
  deck_56.update(deack_56_reserved)
  main_bank = 0

